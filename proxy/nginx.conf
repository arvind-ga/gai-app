# Define the user and worker settings
user  nginx;
worker_processes  1;

# Error log settings
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Log settings
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;

    # Connection timeout settings
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;

    # HTTP server block
    server {
        listen 80;
        server_name gakudoai.com www.gakudoai.com;
        # Redirect HTTP to HTTPS
        return 301 https://gakudoai.com$request_uri;
    }

    # HTTPS server block
    server {
    listen 443 ssl;
    server_name gakudoai.com www.gakudoai.com;

    # SSL certificate and key
    ssl_certificate /etc/nginx/ssl/mycert.cert;
    ssl_certificate_key /etc/nginx/ssl/mycert.prv;

    # Recommended SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;  # Use modern protocols
    ssl_ciphers HIGH:!aNULL:!MD5;   # Use secure ciphers
    ssl_prefer_server_ciphers on;
    
    # Proxy requests to the frontend (Next.js app)
    location / {
        proxy_pass http://nextjs:3000;  # Forwarding to Next.js container on port 3000
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Proxy requests to the backend API (FastAPI)
    location /api/ {
        proxy_pass http://fastapi:8000;  # Forwarding to FastAPI container on port 8000
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' '*';

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' '*';
            return 204;
        }
    }
}
}




# # Define the user and worker settings
# user  nginx;
# worker_processes  1;

# # Error log settings
# error_log  /var/log/nginx/error.log warn;
# pid        /var/run/nginx.pid;

# events {
#     worker_connections  1024;
# }

# http {
#     include       /etc/nginx/mime.types;
#     default_type  application/octet-stream;

#     # Log settings
#     log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                       '$status $body_bytes_sent "$http_referer" '
#                       '"$http_user_agent" "$http_x_forwarded_for"';
#     access_log  /var/log/nginx/access.log  main;

#     # Connection timeout settings
#     sendfile        on;
#     tcp_nopush      on;
#     tcp_nodelay     on;
#     keepalive_timeout  65;
#     types_hash_max_size 2048;

#     # HTTP server block
#     server {
#         listen 80 default_server;

#         # Proxy requests to the frontend (Next.js app)
#         location / {
#             proxy_pass http://nextjs:3000;  # Forwarding to Next.js container on port 3000
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }

#         # Proxy requests to the backend API (FastAPI)
#         location /api/ {
#             proxy_pass http://fastapi:8000/;  # Forwarding to FastAPI container on port 8000
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;

#             # Add CORS headers
#             add_header 'Access-Control-Allow-Origin' '*'; #'http://4.240.79.122:3000';
#             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
#             add_header 'Access-Control-Allow-Headers' '*'; #'Authorization, Content-Type';

#             # Handle preflight requests
#             if ($request_method = 'OPTIONS') {
#                 add_header 'Access-Control-Allow-Origin' '*'; #'http://4.240.79.122:3000';
#                 add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
#                 add_header 'Access-Control-Allow-Headers' '*'; #'Authorization, Content-Type';
#                 return 204;  # Return No Content for preflight
#             }
#         }
#     }
# }